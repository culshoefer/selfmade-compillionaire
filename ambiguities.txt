EXAMPLE:
Paragraph: 72
Problem: it is not clear whether we can omit both the start and end indices
in sequence slicing, like "foo = bar[:]".
Our solution: this is possible in many other languages that support list
slicing (like Python), so our compiler accepts this syntax.


Paragraph: 17
Problem: It's ambiguous whether variables can be declared without initialisation.
Our solution: The wording in the paragraph suggests that it is possible so we're assuming it is. (TODO: Update)

Paragraph: 5
Problem: It's unclear exactly which single-quote character is meant in the definition of a char.
Our solution: For simplicity, we only go with ASCII 39 ('), the character used to denote character literals in Java.
While e.g. Python also accepts ASCII 96 (`), we are no Pythonistas.

Paragraph: 16
Problem: It's not explicit whether functions may be completely empty (in the definition it says
'body consists of local variable declarations (if any), followed by statements', note that this
does not specify whether it's 0..* or 1..* statements)
Solution: We only allow non-empty functions (similar to Python), i.e. every function has to have
1..* statements.
In particular, main is not allowed to be empty and function declarations by the user are not allowed to be empty

Paragraph: 15
Problem: It's not clear whether one has to have parentheses around empty function parameter declarations,
or whether only the main function is allowed not to have parentheses around its parameter declaration, because it is a shiny snowflake.
Solution: 'Normal' function declarations have to have parameter declaration parentheses, even
 for empty parameter declarations. Main uses different rules: As per the spec, it is allowed to
 omit the parentheses (to just have more elegant code). Alternatively, one is allowed to
 place the parentheses. The reason for the latter decision is that people may want to choose
 consistency and have parens in every function including main. In addition, in languages like C, one
 can add commandline arguments, which are passed as parameters to the main function (these
 may be added to the language later, as they are extreeeeeeeemely popular in other languages).
 Thus, we cannot restrict main to not having parentheses at all.
TODO: Tim/Keshav: What do you think about this choice of ambiguity? Let's discuss

Paragraph: 16
Problem: The syntax around print/read is not clear: Should there just be a single space after the keyword?
Solution: Yes. print and read require one or more whitespace characters (i.e. \r, \n, \r\n, " ", \t).
 This solution is similar to Python 2, in which constructs like 'print                 0' are allowed.
 Unlike Python, print() or read() is not allowed in our language.









// Made Today

// TODO: We do not allow overwriting existing keywords using `alias`
Paragraph: 13
Problem: It's not clear if existing existing keywords can be overwritten using 'alias'
Our solution: We do not allow overwriting existing keywords using `alias`

Paragraph: 3
Problem: It's not clear if multiline comments can appear mid-statement?
Our solution: TODO




// I don't think it is allowed
TODO verify that print() is not allowed and read() is not allowed

// In the examples (Table 4: Z statements) the function end with ;
TODO semicols at the end of funcs?


TODO: "Empty" return allowed?
Paragraph: 14
Problem: It is not clear if 'void' can be used as a return type to functions
Solution:

// Checking return types is part of semantic
TODO: Check for return type in func?a

// I don't get this
TODO: Partial function application?

TODO: Global vars: Only mentions global variable DECLARATION, not that assignment is possible (however, its possible in most languages)
Paragraph: 2
Problem: It is not clear if global variables can be assigned values at time
of declaration. The specification only mentions global variable declaration and
says nothing about assignment for the same.
Solution:


TODO: Ints accept hexadecimal notation? (0x...)?
Paragraph: 7
Problem: It is not clear if 'int's can accept values in hexadecimal notation
Solution:

TODO: What types are printable?
Paragraph: 18
Problem: What types are printable?
Solution:


TODO: Can you assign floats to int vars and ints to float variables?
Paragraph: 7
Problem: Can floats be assigned to int vars and ints to float variables?
Solution:

TODO: Can you assign rats to ints? Ints to rats?
Paragraph: 7
Problem: Can rats be assigned to int vars and ints to rat variables?
Solution:


TODO: Whitespace in assign (i.e. is ':      =' possible?)
Paragraph: 8, 9, 10, 17
Problem: Can whitespace be used freely in assign (i.e. is ':      =' to be accepted)

TODO: Is i++ possible? ++i?
Paragraph: 7
Problem: Are pre-increment (++i) and post increment (i++) (and decrement) operators allowed?
Solution:

TODO: Do we allow 1+-1 (== 0), and 1/-1 (== -1)? --> look at tests/custom/expressions/numbers!
Paragraph: 12
Problem: Do we allow minus symbol right after other arithmetic operators (i.e. 1+-1 (== 0), and 1/-1 (== -1))
Solution:

// I dont understand the ambiguity here. Chars can accept digits
TODO: Character can contain ASCII except digits

// It says that identifiers start with a letter followed by underscores, letters etc
TODO: Can variables not start with underscore?

// Isn't type correctness part of semantics
TODO: Say we cannot check for type correctness in frontend of compiler (i.e. one may assign a string value to an int variable?)


TODO: Mixing boolean and arithmetic expressions (e.g. ((1 + 1) or T))
Paragraph: 6
Problem: Can arithmetic expressions be used in place of boolean expressions (e.g. '1' instead of 'T')?
Solution:

// I dont understnd this
TODO: Array slicing: Are expressions allowed for slice indices?


TODO: In spec, only smaller/smaller-eq is mentioned. Surely, you want greater and greater equal?
Paragraph: 12
Problem : The specification only talks about less than and less than equal to
symbols but not about the greater than and greater than symbols
Solution:

TODO: Is empty tdef ok? (see test)
Paragraph: 13
Problem: It is not clear if an empty tdef should be considered valid or not
Solution:

// I am not sure what paragraph to put here
TODO: Explain escaping rules (Do we allow newline? Do we allow tab? Do we allow \s for space)
Paragraph: 10
Problem: It is not clear if escaping rules are allowed (newline, tab, \s for space)
Solution:

// Isn't this same as above
TODO: Allow newline/tab for chars/strings?

TODO: Explain that table on website uses ASCII 166(broken pipe ¦) in place of ASCII 124. Instead we match for ASCII 124,
not ASCII 126, because pipe (|) is used very commonly and the table mentions ASCII 123-126 in the surrounding rows,
implicating that probably they meant ASCII 124, and not ASCII 166
Paragraph: 5
Problem: The ASCII table given to us uses ASCII 221(broken pipe ¦) in place of ASCII 124 (vertical bar |)
Solution: we match for ASCII 124,
not ASCII 126, because pipe (|) is used very commonly and the table mentions ASCII 123-126 in the surrounding rows,
implicating that probably they meant ASCII 124, and not ASCII 221


TODO: Write about whether we predefine strings
Paragraph: 10
Problem: It is not clear if we are supposed to predefine strings.
Solution:
