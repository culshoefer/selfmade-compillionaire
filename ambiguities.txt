Paragraph: 3
Problem: It's not clear if multiline comments can appear mid-statement?
Our solution: We treat multiline comments similar to whitespace and allow to appear anywhere, as long as when you remove
the multiline comment the syntax is still valid.

Paragraph: 5
Problem: The ASCII table given to us uses ASCII 221(broken pipe Â¦) in place of ASCII 124 (vertical bar |)
Solution: We match for ASCII 124, not ASCII 126, because pipe (|) is used very commonly and the table mentions ASCII 123-126 in the surrounding rows,
implicating that probably they meant ASCII 124, and not ASCII 221

Paragraph: 5
Problem: It's unclear exactly which single-quote character is meant in the definition of a char.
Our solution: For simplicity, we only go with ASCII 39 ('), the character used to denote character literals in Java.
While e.g. Python also accepts ASCII 96 (`), we are no Pythonistas.

Paragraph: 7
Problem: Are pre-increment (++i) and post increment (i++) (and decrement) operators allowed?
Solution: We allow pre-increment, pre-decrement as well as post-increment and post-decrement operators because
they are supported in most programming languages.

Paragraph: 10
Problem: It is not clear if we are supposed to predefine strings.
Solution: We do not predefine `string` type in our language, but it can be declared using an alias.

Paragraph: 11
Problem: Can only integers be used as array slicing indices or can we use expressions?
Solution: To make slicing in our language more powerful, we allow expressions to be used as slicing indices.

Paragraph: 12
Problem: Do we allow minus symbol right after other arithmetic operators (i.e. 1+-1 (== 0), and 1/-1 (== -1))
Solution: Following the practice of most programming languages, we allow this construct.

Paragraph: 12
Problem : The specification only talks about less than and less than equal to
symbols but not about the greater than and greater than symbols
Solution: We only implemented the comparison operators mentioned in the spec. The compiler will fail on other operators.

Paragraph: 13
Problem: It is not clear if an empty tdef should be considered valid or not
Solution: We allow an empty type definition. In theory, objects of that type can be used for comparisons.

Paragraph: 13
Problem: It's not clear if existing existing keywords can be overwritten using 'alias'
Our solution: We do not allow overwriting existing keywords using `alias` because we consider it to be a bad practice
that might confuse other developers viewing your code.

Paragraph: 14
Problem: It is not clear if 'void' can be used as a return type to functions
Solution: We allow return to be used on its own, without a return value specified, since most languages allow it.

Paragraph: 15
Problem: It's not clear whether one has to have parentheses around empty function parameter declarations,
or whether only the main function is allowed not to have parentheses around its parameter declaration, because it is a shiny snowflake.
Solution: 'Normal' function declarations have to have parameter declaration parentheses, even
 for empty parameter declarations. Main uses different rules: As per the spec, it is allowed to
 omit the parentheses (to just have more elegant code). Alternatively, one is allowed to
 place the parentheses. The reason for the latter decision is that people may want to choose
 consistency and have parens in every function including main. In addition, in languages like C, one
 can add commandline arguments, which are passed as parameters to the main function (these
 may be added to the language later, as they are extreeeeeeeemely popular in other languages).
 Thus, we cannot restrict main to not having parentheses at all.

Paragraph: 16
Problem: The syntax around print/read is not clear: Should there just be a single space after the keyword?
Solution: Yes. print and read require one or more whitespace characters (i.e. \r, \n, \r\n, " ", \t).
 This solution is similar to Python 2, in which constructs like 'print                 0' are allowed.
 Unlike Python, print() or read() is not allowed in our language.

Paragraph: 17
Problem: It's ambiguous whether variables can be declared without initialisation.
Our solution: The wording in the paragraph suggests that it is possible so we're assuming it is. We're assuming
that Z language can implicitly deduct the type of the variable that is being declared. 
